# Generated by Django 4.2.16 on 2024-09-05 11:24

import common.models
from django.conf import settings
import django.contrib.contenttypes.models
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('security', '0001_initial'),
        ('administration', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Unique identifier')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created at (UTC)')),
                ('created_from', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Created from (IP)')),
                ('modified_at', models.DateTimeField(blank=True, null=True, verbose_name='Modified at (UTC)')),
                ('modified_from', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Modified from (IP)')),
                ('display_name', common.models.CaseInsensitiveCharField(default='', help_text='Uniqueness for this field is case-insensitive.', max_length=150, unique=True, verbose_name='Display Name')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff Status')),
                ('last_access', models.DateTimeField(blank=True, null=True, verbose_name='Last Access (UTC)')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Last Login (UTC)')),
                ('reset_password_token', models.CharField(blank=True, default='', max_length=100, verbose_name='Reset Password Token')),
                ('reset_password_token_exp', models.DateTimeField(blank=True, null=True, verbose_name='Reset Password Expiration (UTC)')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='ContentType',
            fields=[
            ],
            options={
                'verbose_name': 'Content Type',
                'verbose_name_plural': 'Content Types',
                'ordering': ['app_label', 'model'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('contenttypes.contenttype',),
            managers=[
                ('objects', django.contrib.contenttypes.models.ContentTypeManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Unique identifier')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created at (UTC)')),
                ('created_from', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Created from (IP)')),
                ('modified_at', models.DateTimeField(blank=True, null=True, verbose_name='Modified at (UTC)')),
                ('modified_from', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='Modified from (IP)')),
                ('id', models.IntegerField(unique=True, verbose_name='User ID')),
                ('first_name', models.CharField(blank=True, default='', max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, default='', max_length=50, verbose_name='Last Name')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, verbose_name='Phone')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=users.models.get_profile_image_path, verbose_name='Profile Image')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Last Login')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is Admin')),
                ('is_online', models.BooleanField(default=False, verbose_name='Is Online')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accounts', related_query_name='account', to='administration.client', verbose_name='Client')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_%(app_label)s_%(class)s', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('policies', models.ManyToManyField(blank=True, related_name='accounts', related_query_name='account', to='security.policy', verbose_name='Policies')),
                ('roles', models.ManyToManyField(blank=True, related_name='accounts', related_query_name='account', to='security.role', verbose_name='Roles')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'ordering': ['user__display_name'],
                'indexes': [models.Index(fields=['client'], name='account_client_idx'), models.Index(fields=['client', 'user'], name='account_client_user_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.UniqueConstraint(fields=('client', 'user'), name='account_client_user_unq'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['display_name'], name='user_displayname_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['uuid', 'email'], name='user_auth_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['reset_password_token', 'reset_password_token_exp'], name='user_resetpassword_idx'),
        ),
    ]
