"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import timedelta
from os import getenv
import os
from pathlib import Path
from re import sub

from common.utils import is_running_commands
from django.utils.translation import gettext as _

# Site configuration
TITLE_FROM_ENVIRONMENT = getenv("TITLE_FROM_ENVIRONMENT", default="Default Title")

LOGO_ALT_TEXT = getenv("LOGO_ALT_TEXT", default="Default Alt Text")
LOGO_URL = getenv("LOGO_URL", default="https://default-logo-url.com")
SITE_NAME = getenv("SITE_NAME", default="Default Site Name")
FAVICON_URL = getenv("FAVICON_URL", default="https://default-favicon-url.com")

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

API_URL = getenv("API_URL", default="http://localhost:8000/api/")
FRONT_URL = getenv("FRONT_URL", default="http://localhost:3000")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("SECRET_KEY") or ""

ENV_STAGE = getenv("ENV_STAGE", "LOCAL")
ENV_VERSION = getenv("ENV_VERSION", "UNVERSIONED")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG")

# - Server URL
if getenv("SERVER_URL"):  # Required for connections behind a proxy
    TRUSTED_ORIGINS = getenv("SERVER_URL").split(",")
    ALLOWED_HOSTS = [sub(r"^http?://", "", url) for url in TRUSTED_ORIGINS]
else:
    ALLOWED_HOSTS = ["*"]

# CORS
if getenv("TRUSTED_ORIGINS"):
    CORS_ALLOWED_ORIGINS = getenv("TRUSTED_ORIGINS").split(",")
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_CREDENTIALS = True
    CSRF_TRUSTED_ORIGINS = getenv("TRUSTED_ORIGINS").split(",")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_results",
    "django_celery_beat",
    # 3rd packages
    "rest_framework",
    "tinymce",

    # 'rest_framework.authtoken',
    "corsheaders",
    "bootstrap5",
    "jquery",
    "drf_yasg",
    "naomi",
    "django_extensions",

    # local package
    "common",
    "users",
    "security",
    "administration",
    "claims",
    "tickets"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "settings.middlewares.RequestScopeMiddleware",
]

ROOT_URLCONF = "settings.urls"


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'),
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(PROJECT_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "administration.models.site_config",
            ],
        },
    },
]

WSGI_APPLICATION = "settings.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": getenv("DB_NAME", "mysql"),
        "USER": getenv("DB_USER", "mysql"),
        "PASSWORD": getenv("DB_PASSWORD", "mysql"),
        "HOST": getenv("DB_HOST", "mysql"),
        "PORT": getenv("DB_PORT", "3306"),
        "OPTIONS": {
            "charset": "utf8mb4",  
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Users
AUTH_USER_MODEL = "users.User"
ADMIN_USER_UUID = "6993447a-b907-466e-b14f-e26b04f0892d"
SYSTEM_USER_UUID = "80c0c261-7b99-4bd7-8983-3199cee016bf"
ANONYMOUS_USER_UUID = "9c0b2ad4-503f-46d4-a010-531963841eb9"

# Token
JWT_SECRET = getenv("JWT_SECRET", getenv("SECRET_KEY"))
JWT_ISSUER = "https://accounts.devp.com"
JWT_AUD_CHECK = False
if ENV_STAGE.upper() == "LOCAL":
    JWT_ACCESS_EXP = 8  # in hours
else:
    JWT_ACCESS_EXP = 2  # in hours
JWT_REFRESH_EXP = 120  # in hours
RESET_PASSWORD_EXP = 24  # in hours
RESET_PASSWORD_LINK = getenv("RESET_PASSWORD_LINK")
CREATE_PASSWORD_LINK = getenv("RESET_PASSWORD_LINK")
SECURE_COOKIES = getenv("SECURE_COOKIES") != "False"


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "es-ar"

TIME_ZONE = "America/Argentina/Buenos_Aires"

USE_I18N = True

USE_TZ = True

USE_L10N = True

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "api/static/"

MEDIA_ROOT = os.path.join(PROJECT_DIR, 'media')  # La carpeta 'media' dentro de tu proyecto
MEDIA_URL = 'api/media/'

ALLOWED_VIDEO_EXTENSIONS: set = {"mp4", "mp3", "pdf", "pptx","ppt","png","jpg","doc", "docx", "txt"}


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60 * 2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "uuid",
    "USER_ID_CLAIM": "user_id",
    "UPDATE_LAST_LOGIN": True,
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=30),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=7),
}

# LOGGING
LOGS_HANDLERS = {
    "console": {
        "class": "logging.StreamHandler",
        "formatter": "default",
    }
}
if ENV_STAGE.upper() == "LOCAL" or not is_running_commands():
    LOGS_HANDLERS["default"] = {
        # If not in DEBUG mode, will increase logger level to INFO
        "level": "DEBUG" if DEBUG else "INFO",
        "class": "logging.handlers.TimedRotatingFileHandler",
        "filename": (
            "log/django.log" if ENV_STAGE.upper() == "LOCAL" else "/tmp/django.log"
        ),
        "when": "midnight",
        "backupCount": 30,
        "formatter": "default",
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "{asctime} [{levelname:^8}] {name}: {message} [{filename}:{lineno:d}({funcName})]",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": LOGS_HANDLERS,
    "root": {
        "level": "DEBUG",
        "handlers": LOGS_HANDLERS.keys(),
    },
    "loggers": {
        "asyncio": {
            "level": "INFO",
            "handlers": LOGS_HANDLERS.keys(),
            "propagate": False,
        },
        "botocore": {
            "level": "INFO",
            "handlers": LOGS_HANDLERS.keys(),
            "propagate": False,
        },
        "django.request": {
            "level": "ERROR",
            "handlers": LOGS_HANDLERS.keys(),
            "propagate": False,
        },
        "django.server": {
            "level": "ERROR",
            "handlers": LOGS_HANDLERS.keys(),
            "propagate": False,
        },
    },
}

SWAGGER_SETTINGS = {
    "LOGIN_URL": "{}/admin/login".format(API_URL),
    "LOGOUT_URL": "{}/admin/logout".format(API_URL),
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
        },
    },
}


# Cache
REDIS_ENDPOINT = getenv("REDIS_ENDPOINT")
REDIS_ENABLED = True if REDIS_ENDPOINT else False
if REDIS_ENABLED:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": REDIS_ENDPOINT,
        }
    }

# Celery
CELERY_TIMEZONE = "America/Buenos_Aires"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_RESULT_BACKEND = "django-db"
CELERY_BROKER_URL = getenv('CELERY_BROKER_REDIS_URL', default='redis://pdac-redis:6379')


# Email Sender
EMAIL_SENDER_ENABLED = getenv("EMAIL_SENDER_ENABLED")
if DEBUG and not EMAIL_SENDER_ENABLED:
    EMAIL_BACKEND = "naomi.mail.backends.naomi.NaomiBackend"
    EMAIL_FILE_PATH = "./tmp"
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    
#Config EMAIL
EMAIL_HOST = getenv('EMAIL_HOST')
EMAIL_PORT = getenv('EMAIL_PORT')
EMAIL_HOST_USER = getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = getenv("DEFAULT_FROM_EMAIL")

GRAPH_MODELS = {"all_applications": True, "group_models": True}

#ReCaptcha
RECAPTCHA_SECRET_KEY=getenv("RECAPTCHA_SECRET_KEY")